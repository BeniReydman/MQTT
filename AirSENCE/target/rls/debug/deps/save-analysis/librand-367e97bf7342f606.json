{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9","program":"C:\\Users\\Beni Reydman\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rand","--edition=2018","C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"libc\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_hc\"","--cfg","feature=\"std\"","--cfg","feature=\"std_rng\"","-C","metadata=367e97bf7342f606","-C","extra-filename=-367e97bf7342f606","--out-dir","c:\\Users\\Beni Reydman\\Documents\\Work\\Rust Code\\server\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Beni Reydman\\Documents\\Work\\Rust Code\\server\\target\\rls\\debug\\deps","--extern","rand_chacha=c:\\Users\\Beni Reydman\\Documents\\Work\\Rust Code\\server\\target\\rls\\debug\\deps\\librand_chacha-2d4ae45d63cd76c6.rmeta","--extern","rand_core=c:\\Users\\Beni Reydman\\Documents\\Work\\Rust Code\\server\\target\\rls\\debug\\deps\\librand_core-19539747dbb9496a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Beni Reydman\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Beni Reydman\\Documents\\Work\\Rust Code\\server\\target\\rls\\debug\\deps\\librand-367e97bf7342f606.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[728779309098006582,173676297044362089]},"crate_root":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src","external_crates":[{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13792340638522696432,6562702057129175664]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","num":2,"id":{"name":"core","disambiguator":[15193759861541201267,11271807064588555679]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[14952907326872218135,12487713505583705642]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4270858871856055141,429662503683656551]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13736739276610439311,8546019279673671803]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[11897089884961689817,1407821616641891785]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16698441189099483045,3670891992582618256]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10470014520027684012,13673441300295920449]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[2214096295868103412,2358022971609892870]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[7330574433046437760,8773122647356638814]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[13887177793519269180,11619822129923021186]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11659885619414073522,1310368787951422529]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[7776729862757633793,5314869309361816119]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":14,"id":{"name":"rand_core","disambiguator":[14728919173983140505,2499730270793249048]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":15,"id":{"name":"getrandom","disambiguator":[12469951460042448709,3097541810450112907]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[12104105403324191924,8319547231165444404]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","num":17,"id":{"name":"rand_chacha","disambiguator":[2549046740153788140,15659103710068801825]}},{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","num":18,"id":{"name":"ppv_lite86","disambiguator":[8139572040292109081,867773887137890290]}}],"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":408,"byte_end":5226,"line_start":10,"line_end":185,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":143},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2819,"byte_end":2828,"line_start":93,"line_end":93,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":72},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2830,"byte_end":2835,"line_start":93,"line_end":93,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":138},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2837,"byte_end":2844,"line_start":93,"line_end":93,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":144},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2846,"byte_end":2857,"line_start":93,"line_end":93,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9861,"byte_end":9870,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9872,"byte_end":9886,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9911,"byte_end":9917,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9919,"byte_end":9931,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9955,"byte_end":9967,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10007,"byte_end":10014,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10074,"byte_end":10087,"line_start":105,"line_end":105,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10089,"byte_end":10102,"line_start":105,"line_end":105,"column_start":47,"column_end":60},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80688,"byte_end":80701,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":113}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80703,"byte_end":80716,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":113}},{"kind":"Use","ref_id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10411,"byte_end":10420,"line_start":117,"line_end":117,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142956,"byte_end":142968,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143116,"byte_end":143122,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143213,"byte_end":143222,"line_start":29,"line_end":29,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143263,"byte_end":143277,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143279,"byte_end":143290,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143377,"byte_end":143383,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143385,"byte_end":143395,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":14,"index":143},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143432,"byte_end":143441,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143443,"byte_end":143446,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":14,"index":138},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143448,"byte_end":143455,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":14,"index":144},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":143457,"byte_end":143468,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":1753},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":168034,"byte_end":168043,"line_start":14,"line_end":14,"column_start":46,"column_end":55},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":352}},{"kind":"Use","ref_id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":168045,"byte_end":168052,"line_start":14,"line_end":14,"column_start":57,"column_end":64},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":352}},{"kind":"Use","ref_id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":168080,"byte_end":168092,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":352}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":167285,"byte_end":167291,"line_start":108,"line_end":108,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":351}},{"kind":"Use","ref_id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":167365,"byte_end":167374,"line_start":109,"line_end":109,"column_start":73,"column_end":82},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":351}},{"kind":"Use","ref_id":{"krate":14,"index":198},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":167426,"byte_end":167431,"line_start":111,"line_end":111,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":351}},{"kind":"Use","ref_id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3053,"byte_end":3063,"line_start":104,"line_end":104,"column_start":30,"column_end":40},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3079,"byte_end":3083,"line_start":105,"line_end":105,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3085,"byte_end":3088,"line_start":105,"line_end":105,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":408,"byte_end":5226,"line_start":10,"line_end":185,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":289},{"krate":0,"index":304},{"krate":0,"index":351},{"krate":0,"index":489},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":649}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"! Utilities for random number generation","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"! useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! # Quick Start","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"! a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"! [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"! the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! functionality on top of RNGs.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"! if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"!     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"!     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"! }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"! let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"! nums.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"! # The Book","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"! For the user guide and further documentation, please read","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"! [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"allow(clippy :: excessive_precision, clippy :: unreadable_literal, clippy ::\n        float_cmp)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":1983,"byte_end":2082,"line_start":53,"line_end":57,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":44},{"krate":0,"index":113},{"krate":0,"index":125},{"krate":0,"index":151},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":196},{"krate":0,"index":229},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":1450},{"krate":0,"index":1457},{"krate":0,"index":278},{"krate":0,"index":285},{"krate":0,"index":1462},{"krate":0,"index":1467},{"krate":0,"index":1466},{"krate":0,"index":1464}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"! Generating random samples from probability distributions","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5821,"byte_end":5881,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5882,"byte_end":5885,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5886,"byte_end":5962,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"! implementations. It is the workhorse behind some of the convenient","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":5963,"byte_end":6033,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"! functionality of the [`Rng`] trait, e.g. [`Rng::gen`], [`Rng::gen_range`] and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6034,"byte_end":6115,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"! of course [`Rng::sample`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6116,"byte_end":6146,"line_start":15,"line_end":15,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6147,"byte_end":6150,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6151,"byte_end":6224,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"! occurrence of each value in its sample space.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6225,"byte_end":6274,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6275,"byte_end":6278,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6279,"byte_end":6357,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"! algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6358,"byte_end":6431,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"! according to the distribution `X` represents, using an external source of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6432,"byte_end":6509,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"! randomness (an RNG supplied to the `sample` function).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6510,"byte_end":6568,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6569,"byte_end":6572,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6573,"byte_end":6643,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"! Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6644,"byte_end":6717,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"! but it may have internal parameters set at construction time (for example,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6718,"byte_end":6796,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"! [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6797,"byte_end":6877,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6878,"byte_end":6881,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6882,"byte_end":6885,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"! # The `Standard` distribution","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6886,"byte_end":6919,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6920,"byte_end":6923,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6924,"byte_end":6994,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"! distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":6995,"byte_end":7068,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"! produce a random value for many different types, including most primitive","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7069,"byte_end":7146,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"! types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7147,"byte_end":7223,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"! [`Standard`] for more details.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7224,"byte_end":7258,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7259,"byte_end":7262,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7263,"byte_end":7342,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"! possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7343,"byte_end":7417,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"! with the [`random`] function.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7418,"byte_end":7451,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7452,"byte_end":7455,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! ## Random characters","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7456,"byte_end":7480,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7481,"byte_end":7484,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"! [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7485,"byte_end":7559,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"! numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7560,"byte_end":7637,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"! `char`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7638,"byte_end":7649,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7650,"byte_end":7653,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7654,"byte_end":7657,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! # Uniform numeric ranges","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7658,"byte_end":7686,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7687,"byte_end":7690,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7691,"byte_end":7768,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"! more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7769,"byte_end":7844,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"! space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7845,"byte_end":7920,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"! Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":7921,"byte_end":7999,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8000,"byte_end":8003,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"! Values may be sampled from this distribution using [`Rng::gen_range`] or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8004,"byte_end":8080,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"! by creating a distribution object with [`Uniform::new`],","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8081,"byte_end":8141,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"! [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8142,"byte_end":8220,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"! known at compile time it is typically faster to reuse an existing","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8221,"byte_end":8290,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"! distribution object than to call [`Rng::gen_range`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8291,"byte_end":8347,"line_start":61,"line_end":61,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8348,"byte_end":8351,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8352,"byte_end":8424,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"! although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8425,"byte_end":8497,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"! documentation in the [`uniform`] module. Doing so enables generation of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8498,"byte_end":8573,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"! values of type `T` with  [`Rng::gen_range`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8574,"byte_end":8622,"line_start":66,"line_end":66,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8623,"byte_end":8626,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! ## Open and half-open ranges","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8627,"byte_end":8659,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8660,"byte_end":8663,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8664,"byte_end":8739,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"! range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8740,"byte_end":8816,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"! and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8817,"byte_end":8898,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"! [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8899,"byte_end":8982,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"! [`Standard`] documentation for more details.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":8983,"byte_end":9031,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9032,"byte_end":9035,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! # Non-uniform sampling","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9036,"byte_end":9062,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9063,"byte_end":9066,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9067,"byte_end":9144,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"! the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9145,"byte_end":9216,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9217,"byte_end":9220,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9221,"byte_end":9290,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"! [`weighted`] module.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9291,"byte_end":9315,"line_start":82,"line_end":82,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9316,"byte_end":9319,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9320,"byte_end":9394,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9395,"byte_end":9466,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9467,"byte_end":9470,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9471,"byte_end":9474,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9475,"byte_end":9561,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9562,"byte_end":9617,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9618,"byte_end":9665,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"! [`random`]: crate::random","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9667,"byte_end":9696,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"! [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9697,"byte_end":9752,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"! [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":9753,"byte_end":9800,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":20096,"byte_end":20105,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":652}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19518,"byte_end":19549,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19550,"byte_end":19553,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19554,"byte_end":19624,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19625,"byte_end":19628,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19629,"byte_end":19642,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19643,"byte_end":19646,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19647,"byte_end":19658,"line_start":21,"line_end":21,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19659,"byte_end":19714,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19715,"byte_end":19718,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19719,"byte_end":19760,"line_start":24,"line_end":24,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19761,"byte_end":19807,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19808,"byte_end":19863,"line_start":26,"line_end":26,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19864,"byte_end":19871,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19872,"byte_end":19875,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19876,"byte_end":19891,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19892,"byte_end":19895,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19896,"byte_end":19966,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":19967,"byte_end":20037,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":20038,"byte_end":20054,"line_start":33,"line_end":33,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":659},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21570,"byte_end":21588,"line_start":69,"line_end":69,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":658},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21542,"byte_end":21565,"line_start":68,"line_end":68,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21521,"byte_end":21535,"line_start":67,"line_end":67,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"BernoulliError::{InvalidProbability}","parent":null,"children":[{"krate":0,"index":659}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21420,"byte_end":21466,"line_start":65,"line_end":65,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22459,"byte_end":22462,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"fn (p: f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21940,"byte_end":22014,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22019,"byte_end":22022,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22027,"byte_end":22042,"line_start":86,"line_end":86,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22047,"byte_end":22050,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22055,"byte_end":22127,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22132,"byte_end":22205,"line_start":89,"line_end":89,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22210,"byte_end":22213,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22218,"byte_end":22294,"line_start":91,"line_end":91,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22299,"byte_end":22365,"line_start":92,"line_end":92,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22370,"byte_end":22433,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22438,"byte_end":22447,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23343,"byte_end":23353,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"fn (numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22801,"byte_end":22867,"line_start":107,"line_end":107,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22872,"byte_end":22940,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":22945,"byte_end":23019,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23024,"byte_end":23027,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23032,"byte_end":23101,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23106,"byte_end":23179,"line_start":112,"line_end":112,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23184,"byte_end":23256,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23261,"byte_end":23317,"line_start":114,"line_end":114,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23322,"byte_end":23331,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":672},{"krate":0,"index":681},{"krate":0,"index":679},{"krate":0,"index":676},{"krate":0,"index":54},{"krate":0,"index":62},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":684},{"krate":0,"index":694},{"krate":0,"index":692},{"krate":0,"index":689},{"krate":0,"index":98},{"krate":0,"index":697},{"krate":0,"index":699},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":729},{"krate":0,"index":731},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":809},{"krate":0,"index":811},{"krate":0,"index":825},{"krate":0,"index":827},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":889},{"krate":0,"index":898},{"krate":0,"index":896},{"krate":0,"index":893},{"krate":0,"index":99},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":933},{"krate":0,"index":939},{"krate":0,"index":938},{"krate":0,"index":936},{"krate":0,"index":941},{"krate":0,"index":954},{"krate":0,"index":953},{"krate":0,"index":951},{"krate":0,"index":100},{"krate":0,"index":102}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"! A distribution uniformly sampling numbers within a given range.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26529,"byte_end":26596,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26597,"byte_end":26600,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26601,"byte_end":26679,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"! e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26680,"byte_end":26759,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"! standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26760,"byte_end":26827,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"! [`Uniform`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26828,"byte_end":26844,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26845,"byte_end":26848,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! This distribution is provided with support for several primitive types","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26849,"byte_end":26923,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"! (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":26924,"byte_end":27002,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"! and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27003,"byte_end":27082,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"! implementation.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27083,"byte_end":27102,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27103,"byte_end":27106,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27107,"byte_end":27185,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"! back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27186,"byte_end":27261,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"! ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27262,"byte_end":27341,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"! need to be used directly (unless implementing a derived back-end).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27342,"byte_end":27412,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27413,"byte_end":27416,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! # Example usage","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27417,"byte_end":27436,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27437,"byte_end":27440,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27441,"byte_end":27448,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"! use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27449,"byte_end":27481,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"! use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27482,"byte_end":27519,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27520,"byte_end":27523,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27524,"byte_end":27555,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"! let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27556,"byte_end":27597,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27598,"byte_end":27601,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! // sample between 1 and 10 points","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27602,"byte_end":27639,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"! for _ in 0..rng.gen_range(1, 11) {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27640,"byte_end":27678,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"!     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27679,"byte_end":27758,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"!     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27759,"byte_end":27817,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"!     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27818,"byte_end":27858,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"! }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27859,"byte_end":27864,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27865,"byte_end":27872,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27873,"byte_end":27876,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"! # Extending `Uniform` to support a custom type","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27877,"byte_end":27927,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27928,"byte_end":27931,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"! To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":27932,"byte_end":28007,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"! implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28008,"byte_end":28089,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"! helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28090,"byte_end":28166,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28167,"byte_end":28170,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28171,"byte_end":28251,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"! (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28252,"byte_end":28330,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"! Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28331,"byte_end":28407,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"! `low < high`). The example below merely wraps another back-end.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28408,"byte_end":28475,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28476,"byte_end":28479,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"! The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28480,"byte_end":28557,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"! type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28558,"byte_end":28636,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"! by value. In the implementation of these functions, you can choose to","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28637,"byte_end":28710,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"! simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28711,"byte_end":28795,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"! to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28796,"byte_end":28866,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28867,"byte_end":28870,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28871,"byte_end":28878,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28879,"byte_end":28904,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"! use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28905,"byte_end":28967,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"!         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":28968,"byte_end":29024,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29025,"byte_end":29028,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"! struct MyF32(f32);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29029,"byte_end":29051,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29052,"byte_end":29055,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! #[derive(Clone, Copy, Debug)]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29056,"byte_end":29089,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"! struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29090,"byte_end":29133,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29134,"byte_end":29137,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"! impl UniformSampler for UniformMyF32 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29138,"byte_end":29180,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"!     type X = MyF32;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29181,"byte_end":29204,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"!     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29205,"byte_end":29254,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29255,"byte_end":29307,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29308,"byte_end":29359,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29360,"byte_end":29369,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"!         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29370,"byte_end":29453,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"!     }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29454,"byte_end":29463,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"!     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29464,"byte_end":29523,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"!         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29524,"byte_end":29576,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"!               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29577,"byte_end":29628,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"!     {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29629,"byte_end":29638,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"!         UniformSampler::new(low, high)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29639,"byte_end":29681,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"!     }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29682,"byte_end":29691,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"!     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29692,"byte_end":29759,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"!         MyF32(self.0.sample(rng))","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29760,"byte_end":29797,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"!     }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29798,"byte_end":29807,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"! }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29808,"byte_end":29813,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29814,"byte_end":29817,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! impl SampleUniform for MyF32 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29818,"byte_end":29852,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"!     type Sampler = UniformMyF32;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29853,"byte_end":29889,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"! }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29890,"byte_end":29895,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29896,"byte_end":29899,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29900,"byte_end":29955,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"! let uniform = Uniform::new(low, high);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29956,"byte_end":29998,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"! let x = uniform.sample(&mut thread_rng());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":29999,"byte_end":30045,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30046,"byte_end":30053,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30054,"byte_end":30057,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30058,"byte_end":30125,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"! [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30126,"byte_end":30195,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"! [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30196,"byte_end":30257,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"! [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30258,"byte_end":30323,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"! [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30324,"byte_end":30395,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"! [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30396,"byte_end":30477,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":672},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32627,"byte_end":32634,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":30980,"byte_end":31027,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31028,"byte_end":31031,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31032,"byte_end":31103,"line_start":123,"line_end":123,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31104,"byte_end":31180,"line_start":124,"line_end":124,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31181,"byte_end":31242,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31243,"byte_end":31246,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31247,"byte_end":31319,"line_start":127,"line_end":127,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31320,"byte_end":31398,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31399,"byte_end":31477,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31478,"byte_end":31510,"line_start":130,"line_end":130,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31511,"byte_end":31514,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31515,"byte_end":31580,"line_start":132,"line_end":132,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31581,"byte_end":31660,"line_start":133,"line_end":133,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31661,"byte_end":31740,"line_start":134,"line_end":134,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31741,"byte_end":31820,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31821,"byte_end":31898,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31899,"byte_end":31943,"line_start":137,"line_end":137,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31944,"byte_end":31947,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":31948,"byte_end":32006,"line_start":139,"line_end":139,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular care must","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32007,"byte_end":32085,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32086,"byte_end":32165,"line_start":141,"line_end":141,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32166,"byte_end":32169,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32170,"byte_end":32183,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32184,"byte_end":32187,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32188,"byte_end":32195,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32196,"byte_end":32249,"line_start":146,"line_end":146,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32250,"byte_end":32253,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32254,"byte_end":32269,"line_start":148,"line_end":148,"column_start":1,"column_end":16}},{"value":"/     let between = Uniform::from(10..10000);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32270,"byte_end":32317,"line_start":149,"line_end":149,"column_start":1,"column_end":48}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32318,"byte_end":32359,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/     let mut sum = 0;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32360,"byte_end":32384,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/     for _ in 0..1000 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32385,"byte_end":32411,"line_start":152,"line_end":152,"column_start":1,"column_end":27}},{"value":"/         sum += between.sample(&mut rng);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32412,"byte_end":32456,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/     }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32457,"byte_end":32466,"line_start":154,"line_end":154,"column_start":1,"column_end":10}},{"value":"/     println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32467,"byte_end":32495,"line_start":155,"line_end":155,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32496,"byte_end":32501,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32502,"byte_end":32509,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32510,"byte_end":32513,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32514,"byte_end":32539,"line_start":159,"line_end":159,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32540,"byte_end":32585,"line_start":160,"line_end":160,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32870,"byte_end":32873,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32707,"byte_end":32780,"line_start":165,"line_end":165,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32785,"byte_end":32858,"line_start":166,"line_end":166,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33212,"byte_end":33225,"line_start":177,"line_end":177,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Uniform<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33060,"byte_end":33135,"line_start":175,"line_end":175,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33140,"byte_end":33200,"line_start":176,"line_end":176,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33871,"byte_end":33884,"line_start":199,"line_end":199,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":67}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33570,"byte_end":33643,"line_start":192,"line_end":192,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33644,"byte_end":33689,"line_start":193,"line_end":193,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33690,"byte_end":33693,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33694,"byte_end":33766,"line_start":195,"line_end":195,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33767,"byte_end":33798,"line_start":196,"line_end":196,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33799,"byte_end":33802,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33803,"byte_end":33860,"line_start":198,"line_end":198,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33968,"byte_end":33975,"line_start":201,"line_end":201,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33898,"byte_end":33958,"line_start":200,"line_end":200,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34450,"byte_end":34464,"line_start":214,"line_end":214,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":78}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34006,"byte_end":34056,"line_start":204,"line_end":204,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34057,"byte_end":34060,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34061,"byte_end":34133,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34134,"byte_end":34165,"line_start":207,"line_end":207,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34166,"byte_end":34169,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34170,"byte_end":34246,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34247,"byte_end":34324,"line_start":210,"line_end":210,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34325,"byte_end":34328,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34329,"byte_end":34386,"line_start":212,"line_end":212,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34387,"byte_end":34439,"line_start":213,"line_end":213,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34532,"byte_end":34533,"line_start":216,"line_end":216,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34478,"byte_end":34522,"line_start":215,"line_end":215,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34796,"byte_end":34799,"line_start":223,"line_end":223,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34540,"byte_end":34612,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34617,"byte_end":34635,"line_start":219,"line_end":219,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34640,"byte_end":34643,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34648,"byte_end":34711,"line_start":221,"line_end":221,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34716,"byte_end":34788,"line_start":222,"line_end":222,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35172,"byte_end":35185,"line_start":233,"line_end":233,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"fn <B1, B2> (low: B1, high: B2) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34936,"byte_end":34992,"line_start":228,"line_end":228,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34997,"byte_end":35000,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35005,"byte_end":35068,"line_start":230,"line_end":230,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35073,"byte_end":35142,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35147,"byte_end":35164,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35349,"byte_end":35355,"line_start":239,"line_end":239,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"fn <R> (&self, rng: &mut R) -> Self::X","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35322,"byte_end":35341,"line_start":238,"line_end":238,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36330,"byte_end":36343,"line_start":260,"line_end":260,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"fn <R, B1, B2> (low: B1, high: B2, rng: &mut R) -> Self::X","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35410,"byte_end":35485,"line_start":241,"line_end":241,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35490,"byte_end":35534,"line_start":242,"line_end":242,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35539,"byte_end":35542,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35547,"byte_end":35587,"line_start":244,"line_end":244,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35592,"byte_end":35665,"line_start":245,"line_end":245,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35670,"byte_end":35744,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35749,"byte_end":35804,"line_start":247,"line_end":247,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35809,"byte_end":35842,"line_start":248,"line_end":248,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35847,"byte_end":35850,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35855,"byte_end":35930,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35935,"byte_end":35989,"line_start":251,"line_end":251,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":35994,"byte_end":36001,"line_start":252,"line_end":252,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36006,"byte_end":36090,"line_start":253,"line_end":253,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36095,"byte_end":36117,"line_start":254,"line_end":254,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36122,"byte_end":36185,"line_start":255,"line_end":255,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36190,"byte_end":36225,"line_start":256,"line_end":256,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36230,"byte_end":36300,"line_start":257,"line_end":257,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36305,"byte_end":36310,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36315,"byte_end":36322,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37185,"byte_end":37197,"line_start":287,"line_end":287,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":90}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36979,"byte_end":37033,"line_start":282,"line_end":282,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37034,"byte_end":37095,"line_start":283,"line_end":283,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37096,"byte_end":37134,"line_start":284,"line_end":284,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37135,"byte_end":37138,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37139,"byte_end":37174,"line_start":286,"line_end":286,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37351,"byte_end":37357,"line_start":291,"line_end":291,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":88},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37214,"byte_end":37279,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37284,"byte_end":37287,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37292,"byte_end":37343,"line_start":290,"line_end":290,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":684},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39779,"byte_end":39789,"line_start":350,"line_end":350,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37834,"byte_end":37901,"line_start":315,"line_end":315,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37902,"byte_end":37905,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37906,"byte_end":37985,"line_start":317,"line_end":317,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37986,"byte_end":38043,"line_start":318,"line_end":318,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38044,"byte_end":38047,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38048,"byte_end":38074,"line_start":320,"line_end":320,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38075,"byte_end":38078,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38079,"byte_end":38153,"line_start":322,"line_end":322,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38154,"byte_end":38234,"line_start":323,"line_end":323,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38235,"byte_end":38315,"line_start":324,"line_end":324,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38316,"byte_end":38319,"line_start":325,"line_end":325,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38320,"byte_end":38396,"line_start":326,"line_end":326,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38397,"byte_end":38475,"line_start":327,"line_end":327,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38476,"byte_end":38552,"line_start":328,"line_end":328,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38553,"byte_end":38606,"line_start":329,"line_end":329,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38607,"byte_end":38610,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38611,"byte_end":38687,"line_start":331,"line_end":331,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38688,"byte_end":38751,"line_start":332,"line_end":332,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38752,"byte_end":38755,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38756,"byte_end":38830,"line_start":334,"line_end":334,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38831,"byte_end":38911,"line_start":335,"line_end":335,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38912,"byte_end":38998,"line_start":336,"line_end":336,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":38999,"byte_end":39076,"line_start":337,"line_end":337,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39077,"byte_end":39148,"line_start":338,"line_end":338,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39149,"byte_end":39152,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39153,"byte_end":39231,"line_start":340,"line_end":340,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39232,"byte_end":39309,"line_start":341,"line_end":341,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39310,"byte_end":39389,"line_start":342,"line_end":342,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39390,"byte_end":39464,"line_start":343,"line_end":343,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39465,"byte_end":39512,"line_start":344,"line_end":344,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39513,"byte_end":39516,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39517,"byte_end":39593,"line_start":346,"line_end":346,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39594,"byte_end":39673,"line_start":347,"line_end":347,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":39674,"byte_end":39737,"line_start":348,"line_end":348,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51671,"byte_end":51683,"line_start":647,"line_end":647,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50745,"byte_end":50819,"line_start":627,"line_end":627,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50820,"byte_end":50823,"line_start":628,"line_end":628,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50824,"byte_end":50903,"line_start":629,"line_end":629,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50904,"byte_end":50961,"line_start":630,"line_end":630,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50962,"byte_end":50965,"line_start":631,"line_end":631,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50966,"byte_end":50992,"line_start":632,"line_end":632,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50993,"byte_end":50996,"line_start":633,"line_end":633,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":50997,"byte_end":51076,"line_start":634,"line_end":634,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51077,"byte_end":51154,"line_start":635,"line_end":635,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51155,"byte_end":51201,"line_start":636,"line_end":636,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51202,"byte_end":51205,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51206,"byte_end":51284,"line_start":638,"line_end":638,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51285,"byte_end":51357,"line_start":639,"line_end":639,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51358,"byte_end":51437,"line_start":640,"line_end":640,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51438,"byte_end":51490,"line_start":641,"line_end":641,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51491,"byte_end":51494,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51495,"byte_end":51527,"line_start":643,"line_end":643,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51528,"byte_end":51580,"line_start":644,"line_end":644,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":51581,"byte_end":51629,"line_start":645,"line_end":645,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":933},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59747,"byte_end":59762,"line_start":840,"line_end":840,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59498,"byte_end":59562,"line_start":835,"line_end":835,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59563,"byte_end":59566,"line_start":836,"line_end":836,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59567,"byte_end":59647,"line_start":837,"line_end":837,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":59648,"byte_end":59705,"line_start":838,"line_end":838,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":117}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note =\n             \"use rand::distributions::{WeightedIndex, WeightedError} instead\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10139,"byte_end":10243,"line_start":110,"line_end":110,"column_start":1,"column_end":105}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10244,"byte_end":10269,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"! Weighted index sampling","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80507,"byte_end":80534,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80535,"byte_end":80538,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This module is deprecated. Use [`crate::distributions::WeightedIndex`] and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80539,"byte_end":80617,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! [`crate::distributions::WeightedError`] instead.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80618,"byte_end":80670,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80818,"byte_end":80830,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80720,"byte_end":80742,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"deprecated(since = \"0.8.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":80743,"byte_end":80809,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":81135,"byte_end":81148,"line_start":26,"line_end":26,"column_start":16,"column_end":29},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":958}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":81256,"byte_end":81259,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"fn (_weights: Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":81381,"byte_end":81387,"line_start":35,"line_end":35,"column_start":15,"column_end":21},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85031,"byte_end":85044,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted_index::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"decl_id":null,"docs":" A distribution using weighted sampling of discrete items","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling of discrete items","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82517,"byte_end":82577,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82578,"byte_end":82581,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82582,"byte_end":82657,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82658,"byte_end":82730,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82731,"byte_end":82809,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82810,"byte_end":82881,"line_start":25,"line_end":25,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82882,"byte_end":82926,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82927,"byte_end":82930,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82931,"byte_end":82948,"line_start":28,"line_end":28,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82949,"byte_end":82952,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":82953,"byte_end":83025,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights. As an alternative,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83026,"byte_end":83078,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/ [`rand_distr::weighted::alias_method`](https://docs.rs/rand_distr/*/rand_distr/weighted/alias_method/index.html)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83079,"byte_end":83195,"line_start":32,"line_end":32,"column_start":1,"column_end":117}},{"value":"/ supports `O(1)` sampling, but with much higher initialisation cost.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83196,"byte_end":83267,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83268,"byte_end":83271,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83272,"byte_end":83348,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83349,"byte_end":83428,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83429,"byte_end":83432,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83433,"byte_end":83509,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83510,"byte_end":83585,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83586,"byte_end":83661,"line_start":40,"line_end":40,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83662,"byte_end":83736,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83737,"byte_end":83812,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ types, ['Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83813,"byte_end":83867,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83868,"byte_end":83871,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83872,"byte_end":83937,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":83938,"byte_end":84018,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84019,"byte_end":84094,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementaiton of `Uniform<X>::sample`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84095,"byte_end":84166,"line_start":48,"line_end":48,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84167,"byte_end":84170,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84171,"byte_end":84184,"line_start":50,"line_end":50,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84185,"byte_end":84188,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84189,"byte_end":84196,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84197,"byte_end":84222,"line_start":53,"line_end":53,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84223,"byte_end":84266,"line_start":54,"line_end":54,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84267,"byte_end":84270,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84271,"byte_end":84305,"line_start":56,"line_end":56,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84306,"byte_end":84338,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84339,"byte_end":84392,"line_start":58,"line_end":58,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84393,"byte_end":84424,"line_start":59,"line_end":59,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84425,"byte_end":84446,"line_start":60,"line_end":60,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84447,"byte_end":84531,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84532,"byte_end":84587,"line_start":62,"line_end":62,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84588,"byte_end":84593,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84594,"byte_end":84597,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84598,"byte_end":84645,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84646,"byte_end":84723,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84724,"byte_end":84745,"line_start":67,"line_end":67,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84746,"byte_end":84829,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84830,"byte_end":84886,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84887,"byte_end":84892,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84893,"byte_end":84900,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84901,"byte_end":84904,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84905,"byte_end":84963,"line_start":73,"line_end":73,"column_start":1,"column_end":59}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":84964,"byte_end":84995,"line_start":74,"line_end":74,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85618,"byte_end":85621,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"fn <I> (weights: I) -> Result<WeightedIndex<X>, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85230,"byte_end":85299,"line_start":83,"line_end":83,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85304,"byte_end":85367,"line_start":84,"line_end":84,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85372,"byte_end":85416,"line_start":85,"line_end":85,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85421,"byte_end":85424,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85429,"byte_end":85502,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85507,"byte_end":85535,"line_start":88,"line_end":88,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85540,"byte_end":85543,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85548,"byte_end":85606,"line_start":90,"line_end":90,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":87152,"byte_end":87166,"line_start":135,"line_end":135,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"fn (&mut self, new_weights: &[(usize, &X)]) -> Result<(), WeightedError>","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":86729,"byte_end":86800,"line_start":126,"line_end":126,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":86805,"byte_end":86808,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":86813,"byte_end":86859,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":86864,"byte_end":86867,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":86872,"byte_end":86960,"line_start":130,"line_end":130,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":86965,"byte_end":87051,"line_start":131,"line_end":131,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":87056,"byte_end":87082,"line_start":132,"line_end":132,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":87087,"byte_end":87090,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":87095,"byte_end":87140,"line_start":134,"line_end":134,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":988},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95443,"byte_end":95449,"line_start":379,"line_end":379,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted_index::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95385,"byte_end":95438,"line_start":378,"line_end":378,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95564,"byte_end":95577,"line_start":383,"line_end":383,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted_index::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum or\n otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95456,"byte_end":95532,"line_start":381,"line_end":381,"column_start":5,"column_end":81}},{"value":"/ otherwise invalid.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95537,"byte_end":95559,"line_start":382,"line_end":382,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":992},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95646,"byte_end":95660,"line_start":386,"line_end":386,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted_index::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95584,"byte_end":95641,"line_start":385,"line_end":385,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95738,"byte_end":95745,"line_start":389,"line_end":389,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted_index::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95667,"byte_end":95733,"line_start":388,"line_end":388,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":987},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95365,"byte_end":95378,"line_start":377,"line_end":377,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted_index::WeightedError","value":"WeightedError::{NoItem, InvalidWeight, AllWeightsZero, TooMany}","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95260,"byte_end":95310,"line_start":375,"line_end":375,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1007},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98221,"byte_end":98233,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97268,"byte_end":97346,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97347,"byte_end":97397,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97398,"byte_end":97401,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97402,"byte_end":97476,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97477,"byte_end":97554,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97555,"byte_end":97628,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97629,"byte_end":97655,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97656,"byte_end":97659,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97660,"byte_end":97726,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97727,"byte_end":97803,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97804,"byte_end":97815,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97816,"byte_end":97819,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97820,"byte_end":97833,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97834,"byte_end":97841,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97842,"byte_end":97874,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97875,"byte_end":97917,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97918,"byte_end":97921,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97922,"byte_end":97975,"line_start":34,"line_end":34,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":97976,"byte_end":98017,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98018,"byte_end":98025,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98026,"byte_end":98029,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98030,"byte_end":98078,"line_start":38,"line_end":38,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98079,"byte_end":98123,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98124,"byte_end":98179,"line_start":40,"line_end":40,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99164,"byte_end":99170,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98236,"byte_end":98309,"line_start":44,"line_end":44,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98310,"byte_end":98368,"line_start":45,"line_end":45,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98369,"byte_end":98372,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98373,"byte_end":98452,"line_start":47,"line_end":47,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98453,"byte_end":98532,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98533,"byte_end":98592,"line_start":49,"line_end":49,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98593,"byte_end":98596,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98597,"byte_end":98669,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98670,"byte_end":98746,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98747,"byte_end":98758,"line_start":53,"line_end":53,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98759,"byte_end":98762,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98763,"byte_end":98776,"line_start":55,"line_end":55,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98777,"byte_end":98784,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98785,"byte_end":98817,"line_start":57,"line_end":57,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98818,"byte_end":98854,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98855,"byte_end":98858,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98859,"byte_end":98906,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98907,"byte_end":98948,"line_start":61,"line_end":61,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98949,"byte_end":98956,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98957,"byte_end":98960,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":98961,"byte_end":99009,"line_start":64,"line_end":64,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99010,"byte_end":99066,"line_start":65,"line_end":65,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99067,"byte_end":99122,"line_start":66,"line_end":66,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99280,"byte_end":99289,"line_start":73,"line_end":73,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99301,"byte_end":99302,"line_start":74,"line_end":74,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99704,"byte_end":99728,"line_start":84,"line_end":84,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"fn (self, exponent: i32) -> Self::F","parent":{"krate":0,"index":158},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99309,"byte_end":99380,"line_start":76,"line_end":76,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99385,"byte_end":99395,"line_start":77,"line_end":77,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99400,"byte_end":99403,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99408,"byte_end":99482,"line_start":79,"line_end":79,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99487,"byte_end":99504,"line_start":80,"line_end":80,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99509,"byte_end":99583,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99588,"byte_end":99639,"line_start":82,"line_end":82,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\float.rs","byte_start":99644,"byte_end":99696,"line_start":83,"line_end":83,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10369,"byte_end":10382,"line_start":116,"line_end":116,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":163}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119766,"byte_end":119778,"line_start":37,"line_end":37,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `char`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `char`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119297,"byte_end":119371,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119372,"byte_end":119393,"line_start":20,"line_end":20,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119394,"byte_end":119397,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119398,"byte_end":119411,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119412,"byte_end":119415,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119416,"byte_end":119423,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119424,"byte_end":119442,"line_start":25,"line_end":25,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119443,"byte_end":119475,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119476,"byte_end":119518,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119519,"byte_end":119522,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119523,"byte_end":119554,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119555,"byte_end":119595,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119596,"byte_end":119643,"line_start":31,"line_end":31,"column_start":1,"column_end":48}},{"value":"/         .take(7)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119644,"byte_end":119664,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119665,"byte_end":119688,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119689,"byte_end":119729,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119730,"byte_end":119737,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":128385,"byte_end":128391,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":230},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":135647,"byte_end":135651,"line_start":226,"line_end":226,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":136166,"byte_end":136170,"line_start":238,"line_end":238,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":266},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11503,"byte_end":11515,"line_start":141,"line_end":141,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":270}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10482,"byte_end":10560,"line_start":123,"line_end":123,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10561,"byte_end":10564,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10565,"byte_end":10630,"line_start":125,"line_end":125,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10631,"byte_end":10702,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10703,"byte_end":10782,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10783,"byte_end":10843,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10844,"byte_end":10847,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10848,"byte_end":10926,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10927,"byte_end":10995,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10996,"byte_end":11069,"line_start":132,"line_end":132,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11070,"byte_end":11073,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11074,"byte_end":11149,"line_start":134,"line_end":134,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11150,"byte_end":11208,"line_start":135,"line_end":135,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11209,"byte_end":11287,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11288,"byte_end":11366,"line_start":137,"line_end":137,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11367,"byte_end":11434,"line_start":138,"line_end":138,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11435,"byte_end":11438,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11439,"byte_end":11492,"line_start":140,"line_end":140,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11609,"byte_end":11615,"line_start":143,"line_end":143,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"fn <R> (&self, rng: &mut R) -> T","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11525,"byte_end":11601,"line_start":142,"line_end":142,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12822,"byte_end":12833,"line_start":175,"line_end":175,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"fn <R> (self, rng: R) -> DistIter<Self, R, T>","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11664,"byte_end":11738,"line_start":145,"line_end":145,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11743,"byte_end":11772,"line_start":146,"line_end":146,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11777,"byte_end":11780,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11785,"byte_end":11852,"line_start":148,"line_end":148,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11857,"byte_end":11925,"line_start":149,"line_end":149,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":11930,"byte_end":12003,"line_start":150,"line_end":150,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12008,"byte_end":12077,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12082,"byte_end":12149,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12154,"byte_end":12157,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12162,"byte_end":12175,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12180,"byte_end":12183,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12188,"byte_end":12195,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12200,"byte_end":12225,"line_start":157,"line_end":157,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12230,"byte_end":12307,"line_start":158,"line_end":158,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12312,"byte_end":12315,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12320,"byte_end":12347,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12352,"byte_end":12355,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12360,"byte_end":12383,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(rng).take(16).collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12388,"byte_end":12455,"line_start":163,"line_end":163,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12460,"byte_end":12463,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12468,"byte_end":12482,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric.sample_iter(rng).take(7).collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12487,"byte_end":12555,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12560,"byte_end":12563,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12568,"byte_end":12588,"line_start":168,"line_end":168,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12593,"byte_end":12642,"line_start":169,"line_end":169,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(rng);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12647,"byte_end":12697,"line_start":170,"line_end":170,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12702,"byte_end":12743,"line_start":171,"line_end":171,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12748,"byte_end":12792,"line_start":172,"line_end":172,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12797,"byte_end":12802,"line_start":173,"line_end":173,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":12807,"byte_end":12814,"line_start":174,"line_end":174,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13531,"byte_end":13539,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13214,"byte_end":13288,"line_start":195,"line_end":195,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13289,"byte_end":13331,"line_start":196,"line_end":196,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13332,"byte_end":13335,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13336,"byte_end":13415,"line_start":198,"line_end":198,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13416,"byte_end":13451,"line_start":199,"line_end":199,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13452,"byte_end":13455,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13456,"byte_end":13502,"line_start":201,"line_end":201,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1462},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17704,"byte_end":17712,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14423,"byte_end":14501,"line_start":245,"line_end":245,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14502,"byte_end":14582,"line_start":246,"line_end":246,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14583,"byte_end":14617,"line_start":247,"line_end":247,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14618,"byte_end":14621,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14622,"byte_end":14653,"line_start":249,"line_end":249,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14654,"byte_end":14657,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14658,"byte_end":14728,"line_start":251,"line_end":251,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14729,"byte_end":14793,"line_start":252,"line_end":252,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14794,"byte_end":14797,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14798,"byte_end":14874,"line_start":254,"line_end":254,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14875,"byte_end":14909,"line_start":255,"line_end":255,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14910,"byte_end":14986,"line_start":256,"line_end":256,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14987,"byte_end":15055,"line_start":257,"line_end":257,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15056,"byte_end":15122,"line_start":258,"line_end":258,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15123,"byte_end":15161,"line_start":259,"line_end":259,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15162,"byte_end":15231,"line_start":260,"line_end":260,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15232,"byte_end":15306,"line_start":261,"line_end":261,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15307,"byte_end":15355,"line_start":262,"line_end":262,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15356,"byte_end":15432,"line_start":263,"line_end":263,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15433,"byte_end":15463,"line_start":264,"line_end":264,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15464,"byte_end":15467,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15468,"byte_end":15541,"line_start":266,"line_end":266,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15542,"byte_end":15601,"line_start":267,"line_end":267,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15602,"byte_end":15605,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15606,"byte_end":15681,"line_start":269,"line_end":269,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15682,"byte_end":15757,"line_start":270,"line_end":270,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15758,"byte_end":15838,"line_start":271,"line_end":271,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15839,"byte_end":15904,"line_start":272,"line_end":272,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15905,"byte_end":15984,"line_start":273,"line_end":273,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":15985,"byte_end":16052,"line_start":274,"line_end":274,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16053,"byte_end":16056,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16057,"byte_end":16086,"line_start":276,"line_end":276,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16087,"byte_end":16090,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16091,"byte_end":16170,"line_start":278,"line_end":278,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16171,"byte_end":16174,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16175,"byte_end":16182,"line_start":280,"line_end":280,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16183,"byte_end":16209,"line_start":281,"line_end":281,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16210,"byte_end":16228,"line_start":282,"line_end":282,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16229,"byte_end":16283,"line_start":283,"line_end":283,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16284,"byte_end":16287,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16288,"byte_end":16306,"line_start":285,"line_end":285,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16307,"byte_end":16322,"line_start":286,"line_end":286,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16323,"byte_end":16328,"line_start":287,"line_end":287,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16329,"byte_end":16332,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16333,"byte_end":16376,"line_start":289,"line_end":289,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16377,"byte_end":16442,"line_start":290,"line_end":290,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16443,"byte_end":16477,"line_start":291,"line_end":291,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16478,"byte_end":16487,"line_start":292,"line_end":292,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16488,"byte_end":16493,"line_start":293,"line_end":293,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16494,"byte_end":16501,"line_start":294,"line_end":294,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16502,"byte_end":16505,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16506,"byte_end":16526,"line_start":296,"line_end":296,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16527,"byte_end":16534,"line_start":297,"line_end":297,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16535,"byte_end":16560,"line_start":298,"line_end":298,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16561,"byte_end":16599,"line_start":299,"line_end":299,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16600,"byte_end":16603,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16604,"byte_end":16663,"line_start":301,"line_end":301,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16664,"byte_end":16705,"line_start":302,"line_end":302,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16706,"byte_end":16713,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16714,"byte_end":16717,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16718,"byte_end":16753,"line_start":305,"line_end":305,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16754,"byte_end":16834,"line_start":306,"line_end":306,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16835,"byte_end":16899,"line_start":307,"line_end":307,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16900,"byte_end":16903,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16904,"byte_end":16978,"line_start":309,"line_end":309,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":16979,"byte_end":17056,"line_start":310,"line_end":310,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17057,"byte_end":17130,"line_start":311,"line_end":311,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17131,"byte_end":17201,"line_start":312,"line_end":312,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17202,"byte_end":17205,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17206,"byte_end":17282,"line_start":314,"line_end":314,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0, 1)` which also samples from","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17283,"byte_end":17359,"line_start":315,"line_end":315,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` and `gen_range` (which uses [`Uniform`]) use","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17360,"byte_end":17437,"line_start":316,"line_end":316,"column_start":1,"column_end":78}},{"value":"/ transmute-based methods which yield 1 bit less precision but may perform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17438,"byte_end":17514,"line_start":317,"line_end":317,"column_start":1,"column_end":77}},{"value":"/ faster on some architectures (on modern Intel CPUs all methods have","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17515,"byte_end":17586,"line_start":318,"line_end":318,"column_start":1,"column_end":72}},{"value":"/ approximately equal performance).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17587,"byte_end":17624,"line_start":319,"line_end":319,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17625,"byte_end":17628,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":17629,"byte_end":17662,"line_start":321,"line_end":321,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"! Convenience re-export of common members","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142543,"byte_end":142586,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142587,"byte_end":142590,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142591,"byte_end":142667,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"! common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142668,"byte_end":142747,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"! be imported manually:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142748,"byte_end":142773,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142774,"byte_end":142777,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142778,"byte_end":142785,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"! use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142786,"byte_end":142811,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"! # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142812,"byte_end":142870,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"! # let _: f32 = r.gen();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142871,"byte_end":142898,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"! ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\prelude.rs","byte_start":142899,"byte_end":142906,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145684,"byte_end":145687,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":339}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144156,"byte_end":144240,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144241,"byte_end":144311,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144312,"byte_end":144315,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144316,"byte_end":144383,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144384,"byte_end":144387,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144388,"byte_end":144407,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144408,"byte_end":144411,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144412,"byte_end":144482,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144483,"byte_end":144516,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144517,"byte_end":144520,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144521,"byte_end":144597,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144598,"byte_end":144655,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144656,"byte_end":144730,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144731,"byte_end":144807,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144808,"byte_end":144864,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144865,"byte_end":144868,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144869,"byte_end":144948,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":144949,"byte_end":145028,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145029,"byte_end":145108,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145109,"byte_end":145187,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145188,"byte_end":145264,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145265,"byte_end":145339,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145340,"byte_end":145416,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145417,"byte_end":145469,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145470,"byte_end":145473,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145474,"byte_end":145486,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145487,"byte_end":145490,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145491,"byte_end":145498,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145499,"byte_end":145526,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145527,"byte_end":145545,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145546,"byte_end":145549,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145550,"byte_end":145599,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145600,"byte_end":145617,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145618,"byte_end":145623,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145624,"byte_end":145627,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145628,"byte_end":145665,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145666,"byte_end":145673,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146837,"byte_end":146840,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"fn <T> (&mut self) -> T","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145703,"byte_end":145770,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145775,"byte_end":145778,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145783,"byte_end":145796,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145801,"byte_end":145804,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145809,"byte_end":145816,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145821,"byte_end":145853,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145858,"byte_end":145861,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145866,"byte_end":145897,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145902,"byte_end":145929,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145934,"byte_end":145956,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145961,"byte_end":146008,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146013,"byte_end":146020,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146025,"byte_end":146028,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146033,"byte_end":146056,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146061,"byte_end":146064,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146069,"byte_end":146142,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146147,"byte_end":146218,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146223,"byte_end":146237,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146242,"byte_end":146245,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146250,"byte_end":146323,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146328,"byte_end":146398,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146403,"byte_end":146406,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146411,"byte_end":146418,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146423,"byte_end":146455,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146460,"byte_end":146463,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146468,"byte_end":146499,"line_start":81,"line_end":81,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146504,"byte_end":146574,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146579,"byte_end":146582,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146587,"byte_end":146652,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146657,"byte_end":146687,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146692,"byte_end":146749,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146754,"byte_end":146761,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146766,"byte_end":146769,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146774,"byte_end":146815,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146820,"byte_end":146829,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147715,"byte_end":147724,"line_start":120,"line_end":120,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"fn <T, B1, B2> (&mut self, low: B1, high: B2) -> T","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`), i.e. inclusive of\n `low` and exclusive of `high`.","sig":null,"attributes":[{"value":"/ Generate a random value in the range [`low`, `high`), i.e. inclusive of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":146939,"byte_end":147014,"line_start":96,"line_end":96,"column_start":5,"column_end":80}},{"value":"/ `low` and exclusive of `high`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147019,"byte_end":147053,"line_start":97,"line_end":97,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147058,"byte_end":147061,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147066,"byte_end":147138,"line_start":99,"line_end":99,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147143,"byte_end":147211,"line_start":100,"line_end":100,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147216,"byte_end":147288,"line_start":101,"line_end":101,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147293,"byte_end":147296,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147301,"byte_end":147313,"line_start":103,"line_end":103,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147318,"byte_end":147321,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147326,"byte_end":147354,"line_start":105,"line_end":105,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147359,"byte_end":147362,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147367,"byte_end":147380,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147385,"byte_end":147388,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147393,"byte_end":147400,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147405,"byte_end":147437,"line_start":110,"line_end":110,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147442,"byte_end":147445,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147450,"byte_end":147481,"line_start":112,"line_end":112,"column_start":5,"column_end":36}},{"value":"/ let n: u32 = rng.gen_range(0, 10);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147486,"byte_end":147524,"line_start":113,"line_end":113,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147529,"byte_end":147551,"line_start":114,"line_end":114,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147556,"byte_end":147607,"line_start":115,"line_end":115,"column_start":5,"column_end":56}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147612,"byte_end":147634,"line_start":116,"line_end":116,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147639,"byte_end":147646,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147651,"byte_end":147654,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147659,"byte_end":147707,"line_start":119,"line_end":119,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148414,"byte_end":148420,"line_start":142,"line_end":142,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"fn <T, D> (&mut self, distr: D) -> T","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147938,"byte_end":147991,"line_start":128,"line_end":128,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":147996,"byte_end":147999,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148004,"byte_end":148019,"line_start":130,"line_end":130,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148024,"byte_end":148027,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148032,"byte_end":148039,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148044,"byte_end":148076,"line_start":133,"line_end":133,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148081,"byte_end":148118,"line_start":134,"line_end":134,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148123,"byte_end":148126,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148131,"byte_end":148162,"line_start":136,"line_end":136,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148167,"byte_end":148215,"line_start":137,"line_end":137,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148220,"byte_end":148293,"line_start":138,"line_end":138,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148298,"byte_end":148334,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148339,"byte_end":148394,"line_start":140,"line_end":140,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148399,"byte_end":148406,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149734,"byte_end":149745,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"fn <T, D> (self, distr: D) -> distributions::DistIter<D, Self, T>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148510,"byte_end":148584,"line_start":146,"line_end":146,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148589,"byte_end":148592,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148597,"byte_end":148671,"line_start":148,"line_end":148,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148676,"byte_end":148712,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148717,"byte_end":148764,"line_start":150,"line_end":150,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148769,"byte_end":148840,"line_start":151,"line_end":151,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148845,"byte_end":148904,"line_start":152,"line_end":152,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148909,"byte_end":148912,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148917,"byte_end":148930,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148935,"byte_end":148938,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148943,"byte_end":148950,"line_start":156,"line_end":156,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148955,"byte_end":148987,"line_start":157,"line_end":157,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":148992,"byte_end":149055,"line_start":158,"line_end":158,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149060,"byte_end":149063,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ let rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149068,"byte_end":149095,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149100,"byte_end":149103,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149108,"byte_end":149131,"line_start":162,"line_end":162,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = rng.sample_iter(Standard).take(16).collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149136,"byte_end":149203,"line_start":163,"line_end":163,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149208,"byte_end":149211,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149216,"byte_end":149230,"line_start":165,"line_end":165,"column_start":5,"column_end":19}},{"value":"/ let s: String = rng.sample_iter(Alphanumeric).take(7).collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149235,"byte_end":149303,"line_start":166,"line_end":166,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149308,"byte_end":149311,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149316,"byte_end":149338,"line_start":168,"line_end":168,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.sample_iter(Standard).take(5)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149343,"byte_end":149397,"line_start":169,"line_end":169,"column_start":5,"column_end":59}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149402,"byte_end":149467,"line_start":170,"line_end":170,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149472,"byte_end":149475,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149480,"byte_end":149500,"line_start":172,"line_end":172,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149505,"byte_end":149554,"line_start":173,"line_end":173,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = rng.sample_iter(die_range);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149559,"byte_end":149609,"line_start":174,"line_end":174,"column_start":5,"column_end":55}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149614,"byte_end":149655,"line_start":175,"line_end":175,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149660,"byte_end":149704,"line_start":176,"line_end":176,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149709,"byte_end":149714,"line_start":177,"line_end":177,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149719,"byte_end":149726,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150479,"byte_end":150483,"line_start":205,"line_end":205,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"fn <T> (&mut self, dest: &mut T) -> ()","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149915,"byte_end":149971,"line_start":187,"line_end":187,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149976,"byte_end":149979,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":149984,"byte_end":150057,"line_start":189,"line_end":189,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150062,"byte_end":150124,"line_start":190,"line_end":190,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150129,"byte_end":150132,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150137,"byte_end":150206,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150211,"byte_end":150214,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150219,"byte_end":150232,"line_start":194,"line_end":194,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150237,"byte_end":150240,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150245,"byte_end":150252,"line_start":196,"line_end":196,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150257,"byte_end":150289,"line_start":197,"line_end":197,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150294,"byte_end":150297,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150302,"byte_end":150330,"line_start":199,"line_end":199,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150335,"byte_end":150371,"line_start":200,"line_end":200,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150376,"byte_end":150383,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150388,"byte_end":150391,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150396,"byte_end":150435,"line_start":203,"line_end":203,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150440,"byte_end":150471,"line_start":204,"line_end":204,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151323,"byte_end":151331,"line_start":233,"line_end":233,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"fn <T> (&mut self, dest: &mut T) -> Result<(), Error>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150615,"byte_end":150671,"line_start":209,"line_end":209,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150676,"byte_end":150679,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150684,"byte_end":150757,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150762,"byte_end":150824,"line_start":212,"line_end":212,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150829,"byte_end":150832,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150837,"byte_end":150902,"line_start":214,"line_end":214,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150907,"byte_end":150910,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150915,"byte_end":150928,"line_start":216,"line_end":216,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150933,"byte_end":150936,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150941,"byte_end":150948,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150953,"byte_end":150975,"line_start":219,"line_end":219,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":150980,"byte_end":151012,"line_start":220,"line_end":220,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151017,"byte_end":151020,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151025,"byte_end":151068,"line_start":222,"line_end":222,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151073,"byte_end":151101,"line_start":223,"line_end":223,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151106,"byte_end":151147,"line_start":224,"line_end":224,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151152,"byte_end":151164,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151169,"byte_end":151176,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151181,"byte_end":151184,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151189,"byte_end":151215,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151220,"byte_end":151227,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151232,"byte_end":151235,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151240,"byte_end":151287,"line_start":231,"line_end":231,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151292,"byte_end":151315,"line_start":232,"line_end":232,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151968,"byte_end":151976,"line_start":257,"line_end":257,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"fn (&mut self, p: f64) -> bool","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151437,"byte_end":151492,"line_start":237,"line_end":237,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151497,"byte_end":151500,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151505,"byte_end":151572,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151577,"byte_end":151627,"line_start":240,"line_end":240,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151632,"byte_end":151635,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151640,"byte_end":151653,"line_start":242,"line_end":242,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151658,"byte_end":151661,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151666,"byte_end":151673,"line_start":244,"line_end":244,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151678,"byte_end":151710,"line_start":245,"line_end":245,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151715,"byte_end":151718,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151723,"byte_end":151754,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151759,"byte_end":151803,"line_start":248,"line_end":248,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151808,"byte_end":151815,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151820,"byte_end":151823,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151828,"byte_end":151840,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151845,"byte_end":151848,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151853,"byte_end":151879,"line_start":253,"line_end":253,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151884,"byte_end":151887,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151892,"byte_end":151946,"line_start":255,"line_end":255,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":151951,"byte_end":151960,"line_start":256,"line_end":256,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152963,"byte_end":152972,"line_start":286,"line_end":286,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"fn (&mut self, numerator: u32, denominator: u32) -> bool","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152099,"byte_end":152171,"line_start":262,"line_end":262,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152176,"byte_end":152247,"line_start":263,"line_end":263,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152252,"byte_end":152326,"line_start":264,"line_end":264,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152331,"byte_end":152401,"line_start":265,"line_end":265,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152406,"byte_end":152444,"line_start":266,"line_end":266,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152449,"byte_end":152452,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152457,"byte_end":152524,"line_start":268,"line_end":268,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152529,"byte_end":152597,"line_start":269,"line_end":269,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152602,"byte_end":152605,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152610,"byte_end":152622,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152627,"byte_end":152630,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152635,"byte_end":152690,"line_start":273,"line_end":273,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152695,"byte_end":152698,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152703,"byte_end":152716,"line_start":275,"line_end":275,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152721,"byte_end":152724,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152729,"byte_end":152736,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152741,"byte_end":152773,"line_start":278,"line_end":278,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152778,"byte_end":152781,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152786,"byte_end":152817,"line_start":280,"line_end":280,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152822,"byte_end":152862,"line_start":281,"line_end":281,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152867,"byte_end":152874,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152879,"byte_end":152882,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::bernoulli::Bernoulli","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152887,"byte_end":152941,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":152946,"byte_end":152955,"line_start":285,"line_end":285,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153521,"byte_end":153525,"line_start":301,"line_end":301,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153187,"byte_end":153233,"line_start":294,"line_end":294,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153234,"byte_end":153237,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153238,"byte_end":153309,"line_start":296,"line_end":296,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153310,"byte_end":153313,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153314,"byte_end":153384,"line_start":298,"line_end":298,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153385,"byte_end":153426,"line_start":299,"line_end":299,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153427,"byte_end":153510,"line_start":300,"line_end":300,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153570,"byte_end":153578,"line_start":303,"line_end":303,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"fn <R> (&mut self, rng: &mut R) -> Result<(), Error>","parent":{"krate":0,"index":342},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153532,"byte_end":153562,"line_start":302,"line_end":302,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":433},{"krate":0,"index":445},{"krate":0,"index":464},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"! Random number generators and adapters","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162137,"byte_end":162178,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162179,"byte_end":162182,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! ## Background: Random number generators (RNGs)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162183,"byte_end":162233,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162234,"byte_end":162237,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162238,"byte_end":162307,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"! random number generators as follows:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162308,"byte_end":162348,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162349,"byte_end":162352,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162353,"byte_end":162433,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"!     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162434,"byte_end":162512,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"!     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162513,"byte_end":162586,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"!     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162587,"byte_end":162667,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"!     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162668,"byte_end":162747,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"!     a hardware generator (HRNG).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162748,"byte_end":162784,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"! -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162785,"byte_end":162864,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"!     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162865,"byte_end":162943,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"!     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":162944,"byte_end":163024,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"!     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163025,"byte_end":163101,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"!     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163102,"byte_end":163182,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"!     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163183,"byte_end":163263,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"!     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163264,"byte_end":163338,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"! -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163339,"byte_end":163415,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"!     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163416,"byte_end":163492,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"!     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163493,"byte_end":163571,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163572,"byte_end":163575,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"! ## Traits and functionality","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163576,"byte_end":163607,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163608,"byte_end":163611,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"! All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163612,"byte_end":163687,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"! [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163688,"byte_end":163761,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"! additionally implement the [`CryptoRng`] trait.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163762,"byte_end":163813,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163814,"byte_end":163817,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163818,"byte_end":163891,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"! [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163892,"byte_end":163960,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163961,"byte_end":163964,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"! -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":163965,"byte_end":164020,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"! -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164021,"byte_end":164085,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"! -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164086,"byte_end":164162,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"! -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164163,"byte_end":164226,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164227,"byte_end":164230,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164231,"byte_end":164295,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164296,"byte_end":164299,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"! ## Our generators","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164300,"byte_end":164321,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164322,"byte_end":164325,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! This crate provides several random number generators:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164326,"byte_end":164383,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164384,"byte_end":164387,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"! -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164388,"byte_end":164461,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"!     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164462,"byte_end":164535,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"!     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164536,"byte_end":164600,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"! -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164601,"byte_end":164681,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"!     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164682,"byte_end":164760,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"!     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164761,"byte_end":164835,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"!     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164836,"byte_end":164893,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"! -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164894,"byte_end":164974,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"!     (based on reviews, maturity and usage). The current algorithm is ChaCha20,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":164975,"byte_end":165057,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"!     which is well established and rigorously analysed.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165058,"byte_end":165116,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"!     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165117,"byte_end":165192,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"!     periodic reseeding.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165193,"byte_end":165220,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"! -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165221,"byte_end":165302,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"!     little memory, and have good output quality.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165303,"byte_end":165355,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165356,"byte_end":165359,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"! The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165360,"byte_end":165437,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"! release and may be platform-dependent, therefore they should be considered","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165438,"byte_end":165516,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"! **not reproducible**.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165517,"byte_end":165542,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165543,"byte_end":165546,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! ## Additional generators","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165547,"byte_end":165575,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165576,"byte_end":165579,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165580,"byte_end":165655,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"! RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165656,"byte_end":165719,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"! The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165720,"byte_end":165789,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"! entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165790,"byte_end":165860,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"! [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165861,"byte_end":165931,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165932,"byte_end":165935,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"! **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":165936,"byte_end":166014,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"! families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166015,"byte_end":166088,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"! [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166089,"byte_end":166167,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"! be used directly when **reproducibility** matters.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166168,"byte_end":166222,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"! Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166223,"byte_end":166297,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"! A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166298,"byte_end":166372,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166373,"byte_end":166376,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"! [`Rng`]: crate::Rng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166377,"byte_end":166400,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"! [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166401,"byte_end":166432,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"! [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166433,"byte_end":166468,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"! [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166469,"byte_end":166508,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"! [`thread_rng`]: crate::thread_rng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166509,"byte_end":166546,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"! [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166547,"byte_end":166594,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"! [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166595,"byte_end":166652,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"! [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166653,"byte_end":166710,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"! [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166711,"byte_end":166762,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"! [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166763,"byte_end":166822,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"! [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166823,"byte_end":166870,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":375},{"krate":0,"index":429},{"krate":0,"index":432}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"! Wrappers / adapters forming RNGs","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\mod.rs","byte_start":167901,"byte_end":167937,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1747},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169593,"byte_end":169600,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1749}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168643,"byte_end":168711,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168712,"byte_end":168753,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168754,"byte_end":168757,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168758,"byte_end":168832,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168833,"byte_end":168836,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168837,"byte_end":168914,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168915,"byte_end":168937,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168938,"byte_end":168941,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168942,"byte_end":168954,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168955,"byte_end":168958,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":168959,"byte_end":169037,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169038,"byte_end":169113,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169114,"byte_end":169185,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169186,"byte_end":169251,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169252,"byte_end":169255,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169256,"byte_end":169269,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169270,"byte_end":169273,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169274,"byte_end":169281,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169282,"byte_end":169300,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169301,"byte_end":169338,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169339,"byte_end":169342,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169343,"byte_end":169387,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169388,"byte_end":169430,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169431,"byte_end":169470,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169471,"byte_end":169478,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169479,"byte_end":169482,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169483,"byte_end":169516,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169517,"byte_end":169564,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169708,"byte_end":169711,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"fn (r: R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169655,"byte_end":169696,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1753},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":170620,"byte_end":170629,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":170567,"byte_end":170591,"line_start":87,"line_end":87,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175750,"byte_end":175762,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173149,"byte_end":173226,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173227,"byte_end":173252,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173253,"byte_end":173256,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173257,"byte_end":173327,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173328,"byte_end":173331,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173332,"byte_end":173371,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173372,"byte_end":173435,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173436,"byte_end":173516,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173517,"byte_end":173588,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173589,"byte_end":173653,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173654,"byte_end":173693,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173694,"byte_end":173767,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173768,"byte_end":173771,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173772,"byte_end":173848,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173849,"byte_end":173852,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173853,"byte_end":173924,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":173925,"byte_end":174003,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174004,"byte_end":174084,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174085,"byte_end":174131,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174132,"byte_end":174135,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174136,"byte_end":174216,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174217,"byte_end":174297,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174298,"byte_end":174369,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174370,"byte_end":174427,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174428,"byte_end":174431,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174432,"byte_end":174508,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174509,"byte_end":174553,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174554,"byte_end":174557,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174558,"byte_end":174578,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174579,"byte_end":174582,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174583,"byte_end":174662,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174663,"byte_end":174733,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174734,"byte_end":174797,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174798,"byte_end":174876,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174877,"byte_end":174926,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174927,"byte_end":174930,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":174931,"byte_end":175009,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175010,"byte_end":175032,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175033,"byte_end":175036,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175037,"byte_end":175050,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175051,"byte_end":175054,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175055,"byte_end":175062,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175063,"byte_end":175088,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175089,"byte_end":175158,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175159,"byte_end":175218,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175219,"byte_end":175245,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175246,"byte_end":175288,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175289,"byte_end":175292,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175293,"byte_end":175337,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175338,"byte_end":175400,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175401,"byte_end":175404,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175405,"byte_end":175452,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175453,"byte_end":175456,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175457,"byte_end":175504,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175505,"byte_end":175572,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175573,"byte_end":175580,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175581,"byte_end":175584,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175585,"byte_end":175637,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175638,"byte_end":175682,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175683,"byte_end":175721,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176266,"byte_end":176269,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"fn (rng: R, threshold: u64, reseeder: Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175969,"byte_end":176043,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176048,"byte_end":176071,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176076,"byte_end":176079,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176084,"byte_end":176160,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176165,"byte_end":176238,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176243,"byte_end":176254,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176454,"byte_end":176460,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"fn (&mut self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176413,"byte_end":176442,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":1779},{"krate":0,"index":1784},{"krate":0,"index":1782},{"krate":0,"index":438},{"krate":0,"index":440}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"! Mock random number generator","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185411,"byte_end":185443,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1779},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185969,"byte_end":185976,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1780},{"krate":0,"index":1781}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185486,"byte_end":185548,"line_start":13,"line_end":13,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185549,"byte_end":185552,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185553,"byte_end":185627,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185628,"byte_end":185701,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185702,"byte_end":185738,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185739,"byte_end":185742,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185743,"byte_end":185750,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185751,"byte_end":185769,"line_start":20,"line_end":20,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185770,"byte_end":185804,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185805,"byte_end":185808,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185809,"byte_end":185849,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185850,"byte_end":185890,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185891,"byte_end":185925,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":185926,"byte_end":185933,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186166,"byte_end":186169,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"fn (initial: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186025,"byte_end":186094,"line_start":34,"line_end":34,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186099,"byte_end":186154,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1786},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188426,"byte_end":188432,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":187687,"byte_end":187765,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":187766,"byte_end":187839,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":187840,"byte_end":187886,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":187887,"byte_end":187890,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 20 rounds.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":187891,"byte_end":187964,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ This may change as new evidence of cipher security and performance","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":187965,"byte_end":188035,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ becomes available.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188036,"byte_end":188058,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188059,"byte_end":188062,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188063,"byte_end":188139,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188140,"byte_end":188213,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188214,"byte_end":188292,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188293,"byte_end":188330,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188331,"byte_end":188334,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188335,"byte_end":188390,"line_start":34,"line_end":34,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1793},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192810,"byte_end":192819,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":1794}],"decl_id":null,"docs":" The type returned by [`thread_rng`], essentially just a reference to the\n PRNG in thread-local memory.","sig":null,"attributes":[{"value":"/ The type returned by [`thread_rng`], essentially just a reference to the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":191917,"byte_end":191993,"line_start":39,"line_end":39,"column_start":1,"column_end":77}},{"value":"/ PRNG in thread-local memory.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":191994,"byte_end":192026,"line_start":40,"line_end":40,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192027,"byte_end":192030,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192031,"byte_end":192109,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ As hinted by the name, the generator is thread-local. `ThreadRng` is a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192110,"byte_end":192184,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ handle to this generator and thus supports `Copy`, but not `Send` or `Sync`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192185,"byte_end":192265,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192266,"byte_end":192269,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192270,"byte_end":192347,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192348,"byte_end":192408,"line_start":47,"line_end":47,"column_start":1,"column_end":61}},{"value":"/ [`OsRng`] is used to provide seed data.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192409,"byte_end":192452,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192453,"byte_end":192456,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192457,"byte_end":192536,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192537,"byte_end":192616,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192617,"byte_end":192671,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192672,"byte_end":192675,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192676,"byte_end":192732,"line_start":54,"line_end":54,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":192733,"byte_end":192768,"line_start":55,"line_end":55,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":476},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193709,"byte_end":193719,"line_start":80,"line_end":80,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"fn () -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193332,"byte_end":193405,"line_start":73,"line_end":73,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193406,"byte_end":193477,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193478,"byte_end":193539,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193540,"byte_end":193614,"line_start":76,"line_end":76,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193615,"byte_end":193653,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193654,"byte_end":193657,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193658,"byte_end":193701,"line_start":79,"line_end":79,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":489},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":587},{"krate":0,"index":594},{"krate":0,"index":625},{"krate":0,"index":1838},{"krate":0,"index":1845},{"krate":0,"index":627},{"krate":0,"index":635},{"krate":0,"index":640}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"! Sequence-related functionality","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195183,"byte_end":195217,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195218,"byte_end":195221,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! This module provides:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195222,"byte_end":195247,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195248,"byte_end":195251,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195252,"byte_end":195303,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"! *   [`IteratorRandom`] iterator sampling","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195304,"byte_end":195348,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"! *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195349,"byte_end":195420,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"!     `0..length`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195421,"byte_end":195440,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195441,"byte_end":195444,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! Also see:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195445,"byte_end":195458,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195459,"byte_end":195462,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! *   [`crate::distributions::weighted`] module which provides","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195463,"byte_end":195527,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"!     implementations of weighted index sampling.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195528,"byte_end":195579,"line_start":21,"line_end":21,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195580,"byte_end":195583,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195584,"byte_end":195661,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"! `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195662,"byte_end":195737,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"! small performance boost in some cases).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195738,"byte_end":195781,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":490},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":498},{"krate":0,"index":1805},{"krate":0,"index":1814},{"krate":0,"index":1812},{"krate":0,"index":499},{"krate":0,"index":507},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":1816},{"krate":0,"index":1824},{"krate":0,"index":516},{"krate":0,"index":523},{"krate":0,"index":1827},{"krate":0,"index":1836},{"krate":0,"index":1834},{"krate":0,"index":525},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195784,"byte_end":195809,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"! Low-level API for sampling indices","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228031,"byte_end":228069,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228720,"byte_end":228723,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228758,"byte_end":228763,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":1805},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1805},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228686,"byte_end":228694,"line_start":29,"line_end":29,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"IndexVec::{U32, USize}","parent":null,"children":[{"krate":0,"index":1806},{"krate":0,"index":1809}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228572,"byte_end":228596,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228597,"byte_end":228600,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228601,"byte_end":228652,"line_start":27,"line_end":27,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228859,"byte_end":228862,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228800,"byte_end":228833,"line_start":37,"line_end":37,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228838,"byte_end":228847,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229080,"byte_end":229088,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229016,"byte_end":229054,"line_start":46,"line_end":46,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229059,"byte_end":229068,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229425,"byte_end":229430,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"fn (&self, index: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229251,"byte_end":229293,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229298,"byte_end":229301,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229306,"byte_end":229376,"line_start":57,"line_end":57,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229381,"byte_end":229399,"line_start":58,"line_end":58,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229404,"byte_end":229413,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229709,"byte_end":229717,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"fn (self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229609,"byte_end":229683,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229688,"byte_end":229697,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229982,"byte_end":229986,"line_start":78,"line_end":78,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"fn (&self) -> IndexVecIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229896,"byte_end":229956,"line_start":76,"line_end":76,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":229961,"byte_end":229970,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":230296,"byte_end":230305,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"into_iter","qualname":"<IndexVec>::into_iter","value":"fn (self) -> IndexVecIntoIter","parent":null,"children":[],"decl_id":null,"docs":" Convert into an iterator over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Convert into an iterator over the indices as a sequence of `usize` values","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":230193,"byte_end":230270,"line_start":85,"line_end":85,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":230275,"byte_end":230284,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231458,"byte_end":231461,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter<'a, u32>)","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1821},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231508,"byte_end":231513,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter<'a, usize>)","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231416,"byte_end":231428,"line_start":127,"line_end":127,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"IndexVecIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":1818},{"krate":0,"index":1821}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231353,"byte_end":231389,"line_start":125,"line_end":125,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232249,"byte_end":232252,"line_start":161,"line_end":161,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1831},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232297,"byte_end":232302,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1827},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232207,"byte_end":232223,"line_start":159,"line_end":159,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"IndexVecIntoIter::{U32, USize}","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1831}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232132,"byte_end":232173,"line_start":157,"line_end":157,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233978,"byte_end":233984,"line_start":213,"line_end":213,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"fn <R> (rng: &mut R, length: usize, amount: usize) -> IndexVec","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232910,"byte_end":232985,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232986,"byte_end":233035,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233036,"byte_end":233039,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233040,"byte_end":233116,"line_start":194,"line_end":194,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233117,"byte_end":233194,"line_start":195,"line_end":195,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233195,"byte_end":233214,"line_start":196,"line_end":196,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233215,"byte_end":233218,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233219,"byte_end":233292,"line_start":198,"line_end":198,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233293,"byte_end":233365,"line_start":199,"line_end":199,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233366,"byte_end":233442,"line_start":200,"line_end":200,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233443,"byte_end":233521,"line_start":201,"line_end":201,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233522,"byte_end":233597,"line_start":202,"line_end":202,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233598,"byte_end":233614,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233615,"byte_end":233618,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233619,"byte_end":233697,"line_start":205,"line_end":205,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233698,"byte_end":233770,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233771,"byte_end":233799,"line_start":207,"line_end":207,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233800,"byte_end":233803,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233804,"byte_end":233876,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233877,"byte_end":233933,"line_start":210,"line_end":210,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233934,"byte_end":233937,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":233938,"byte_end":233970,"line_start":212,"line_end":212,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196757,"byte_end":196768,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":577},{"krate":0,"index":583},{"krate":0,"index":585}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196133,"byte_end":196211,"line_start":39,"line_end":39,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196212,"byte_end":196215,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196216,"byte_end":196289,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196290,"byte_end":196365,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196366,"byte_end":196369,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196370,"byte_end":196377,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196378,"byte_end":196409,"line_start":45,"line_end":45,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196410,"byte_end":196413,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196414,"byte_end":196429,"line_start":47,"line_end":47,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196430,"byte_end":196471,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/     let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196472,"byte_end":196538,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/     bytes.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196539,"byte_end":196571,"line_start":50,"line_end":50,"column_start":1,"column_end":33}},{"value":"/     let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196572,"byte_end":196624,"line_start":51,"line_end":51,"column_start":1,"column_end":53}},{"value":"/     println!(\"{}\", str);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196625,"byte_end":196653,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196654,"byte_end":196659,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196660,"byte_end":196667,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196668,"byte_end":196707,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196708,"byte_end":196719,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196720,"byte_end":196738,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196739,"byte_end":196746,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":564},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196806,"byte_end":196810,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196775,"byte_end":196796,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197296,"byte_end":197302,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"fn <R> (&self, rng: &mut R) -> Option<&Self::Item>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196817,"byte_end":196893,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196898,"byte_end":196917,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196922,"byte_end":196925,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196930,"byte_end":196967,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196972,"byte_end":196975,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196980,"byte_end":196993,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":196998,"byte_end":197001,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197006,"byte_end":197013,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197018,"byte_end":197043,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197048,"byte_end":197079,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197084,"byte_end":197087,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197092,"byte_end":197131,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197136,"byte_end":197167,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197172,"byte_end":197219,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197224,"byte_end":197276,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197281,"byte_end":197288,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197547,"byte_end":197557,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"fn <R> (&mut self, rng: &mut R) -> Option<&mut Self::Item>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197381,"byte_end":197451,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197456,"byte_end":197489,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197494,"byte_end":197497,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197502,"byte_end":197539,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198592,"byte_end":198607,"line_start":114,"line_end":114,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"fn <R> (&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Item>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197644,"byte_end":197719,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197724,"byte_end":197794,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197799,"byte_end":197872,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197877,"byte_end":197880,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197885,"byte_end":197958,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197963,"byte_end":197966,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":197971,"byte_end":198031,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198036,"byte_end":198039,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198044,"byte_end":198057,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198062,"byte_end":198069,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198074,"byte_end":198105,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198110,"byte_end":198113,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198118,"byte_end":198160,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198165,"byte_end":198212,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198217,"byte_end":198220,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198225,"byte_end":198266,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198271,"byte_end":198347,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198352,"byte_end":198355,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198360,"byte_end":198385,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198390,"byte_end":198417,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198422,"byte_end":198508,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198513,"byte_end":198532,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198537,"byte_end":198542,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198547,"byte_end":198554,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198559,"byte_end":198584,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199749,"byte_end":199764,"line_start":141,"line_end":141,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"fn <R, F, B, X> (&self, rng: &mut R, weight: F) -> Result<&Self::Item, WeightedError>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198715,"byte_end":198789,"line_start":117,"line_end":117,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198794,"byte_end":198808,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198813,"byte_end":198816,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198821,"byte_end":198889,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198894,"byte_end":198968,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":198973,"byte_end":199044,"line_start":122,"line_end":122,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199049,"byte_end":199052,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199057,"byte_end":199108,"line_start":124,"line_end":124,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199113,"byte_end":199179,"line_start":125,"line_end":125,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199184,"byte_end":199187,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199192,"byte_end":199205,"line_start":127,"line_end":127,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199210,"byte_end":199213,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199218,"byte_end":199225,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199230,"byte_end":199255,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199260,"byte_end":199263,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199268,"byte_end":199317,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199322,"byte_end":199353,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199358,"byte_end":199438,"line_start":134,"line_end":134,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199443,"byte_end":199525,"line_start":135,"line_end":135,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199530,"byte_end":199537,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199542,"byte_end":199577,"line_start":137,"line_end":137,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199582,"byte_end":199643,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199648,"byte_end":199711,"line_start":139,"line_end":139,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":199716,"byte_end":199741,"line_start":140,"line_end":140,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200807,"byte_end":200826,"line_start":168,"line_end":168,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"fn <R, F, B, X> (&mut self, rng: &mut R, weight: F) -> Result<&mut Self::Item, WeightedError>","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200123,"byte_end":200198,"line_start":154,"line_end":154,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200203,"byte_end":200220,"line_start":155,"line_end":155,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200225,"byte_end":200228,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200233,"byte_end":200301,"line_start":157,"line_end":157,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200306,"byte_end":200380,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200385,"byte_end":200456,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200461,"byte_end":200464,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200469,"byte_end":200520,"line_start":161,"line_end":161,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200525,"byte_end":200587,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200592,"byte_end":200595,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200600,"byte_end":200643,"line_start":164,"line_end":164,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200648,"byte_end":200701,"line_start":165,"line_end":165,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200706,"byte_end":200769,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":200774,"byte_end":200799,"line_start":167,"line_end":167,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201618,"byte_end":201625,"line_start":197,"line_end":197,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"fn <R> (&mut self, rng: &mut R) -> ()","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201193,"byte_end":201230,"line_start":181,"line_end":181,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201235,"byte_end":201238,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201243,"byte_end":201294,"line_start":183,"line_end":183,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201299,"byte_end":201302,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201307,"byte_end":201320,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201325,"byte_end":201328,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201333,"byte_end":201340,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201345,"byte_end":201376,"line_start":188,"line_end":188,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201381,"byte_end":201406,"line_start":189,"line_end":189,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201411,"byte_end":201414,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201419,"byte_end":201450,"line_start":191,"line_end":191,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201455,"byte_end":201487,"line_start":192,"line_end":192,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201492,"byte_end":201528,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201533,"byte_end":201557,"line_start":194,"line_end":194,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201562,"byte_end":201598,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201603,"byte_end":201610,"line_start":196,"line_end":196,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202490,"byte_end":202505,"line_start":217,"line_end":217,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"fn <R> (&mut self, rng: &mut R, amount: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":563},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201685,"byte_end":201730,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201735,"byte_end":201738,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201743,"byte_end":201815,"line_start":202,"line_end":202,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201820,"byte_end":201889,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201894,"byte_end":201935,"line_start":204,"line_end":204,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201940,"byte_end":201943,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":201948,"byte_end":202022,"line_start":206,"line_end":206,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202027,"byte_end":202076,"line_start":207,"line_end":207,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202081,"byte_end":202084,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202089,"byte_end":202165,"line_start":209,"line_end":209,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202170,"byte_end":202216,"line_start":210,"line_end":210,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202221,"byte_end":202290,"line_start":211,"line_end":211,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202295,"byte_end":202298,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202303,"byte_end":202376,"line_start":213,"line_end":213,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202381,"byte_end":202413,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202418,"byte_end":202421,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202426,"byte_end":202482,"line_start":216,"line_end":216,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203182,"byte_end":203196,"line_start":242,"line_end":242,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202635,"byte_end":202703,"line_start":223,"line_end":223,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202704,"byte_end":202707,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all sized iterators, providing methods for","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202708,"byte_end":202783,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202784,"byte_end":202845,"line_start":226,"line_end":226,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202846,"byte_end":202849,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202850,"byte_end":202857,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202858,"byte_end":202892,"line_start":229,"line_end":229,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202893,"byte_end":202896,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202897,"byte_end":202912,"line_start":231,"line_end":231,"column_start":1,"column_end":16}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202913,"byte_end":202954,"line_start":232,"line_end":232,"column_start":1,"column_end":42}},{"value":"/     ","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202955,"byte_end":202963,"line_start":233,"line_end":233,"column_start":1,"column_end":9}},{"value":"/     let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":202964,"byte_end":203011,"line_start":234,"line_end":234,"column_start":1,"column_end":30}},{"value":"/     println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203012,"byte_end":203082,"line_start":235,"line_end":235,"column_start":1,"column_end":71}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203083,"byte_end":203088,"line_start":236,"line_end":236,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203089,"byte_end":203096,"line_start":237,"line_end":237,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203097,"byte_end":203136,"line_start":238,"line_end":238,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203137,"byte_end":203148,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203149,"byte_end":203163,"line_start":240,"line_end":240,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203164,"byte_end":203171,"line_start":241,"line_end":241,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203829,"byte_end":203835,"line_start":255,"line_end":255,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"fn <R> (mut self, rng: &mut R) -> Option<Self::Item>","parent":{"krate":0,"index":587},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203221,"byte_end":203272,"line_start":243,"line_end":243,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203277,"byte_end":203280,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203285,"byte_end":203341,"line_start":245,"line_end":245,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203346,"byte_end":203349,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203354,"byte_end":203424,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203429,"byte_end":203503,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203508,"byte_end":203575,"line_start":249,"line_end":249,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203580,"byte_end":203649,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203654,"byte_end":203717,"line_start":251,"line_end":251,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203722,"byte_end":203725,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ For slices, prefer [`SliceRandom::choose`] which guarantees `O(1)`","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203730,"byte_end":203800,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ performance.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203805,"byte_end":203821,"line_start":254,"line_end":254,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205953,"byte_end":205973,"line_start":317,"line_end":317,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"fn <R> (mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize","parent":{"krate":0,"index":587},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205266,"byte_end":205336,"line_start":304,"line_end":304,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205341,"byte_end":205373,"line_start":305,"line_end":305,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205378,"byte_end":205381,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205386,"byte_end":205459,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205464,"byte_end":205536,"line_start":308,"line_end":308,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205541,"byte_end":205573,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205578,"byte_end":205581,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205586,"byte_end":205664,"line_start":311,"line_end":311,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205669,"byte_end":205747,"line_start":312,"line_end":312,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205752,"byte_end":205806,"line_start":313,"line_end":313,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205811,"byte_end":205814,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205819,"byte_end":205884,"line_start":315,"line_end":315,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":205889,"byte_end":205945,"line_start":316,"line_end":316,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207385,"byte_end":207400,"line_start":356,"line_end":356,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"fn <R> (mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>","parent":{"krate":0,"index":587},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206656,"byte_end":206727,"line_start":341,"line_end":341,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206732,"byte_end":206735,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206740,"byte_end":206816,"line_start":343,"line_end":343,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206821,"byte_end":206824,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206829,"byte_end":206902,"line_start":345,"line_end":345,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206907,"byte_end":206979,"line_start":346,"line_end":346,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":206984,"byte_end":207016,"line_start":347,"line_end":347,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207021,"byte_end":207024,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207029,"byte_end":207102,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207107,"byte_end":207180,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207185,"byte_end":207208,"line_start":351,"line_end":351,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207213,"byte_end":207216,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207221,"byte_end":207286,"line_start":353,"line_end":353,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207291,"byte_end":207347,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":207352,"byte_end":207377,"line_start":355,"line_end":355,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211707,"byte_end":211722,"line_start":491,"line_end":491,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1844}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211486,"byte_end":211531,"line_start":485,"line_end":485,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211532,"byte_end":211535,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211536,"byte_end":211565,"line_start":487,"line_end":487,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211566,"byte_end":211652,"line_start":488,"line_end":488,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211653,"byte_end":211678,"line_start":489,"line_end":489,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4278,"byte_end":4284,"line_start":154,"line_end":154,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3195,"byte_end":3271,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3272,"byte_end":3275,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3276,"byte_end":3354,"line_start":112,"line_end":112,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3355,"byte_end":3432,"line_start":113,"line_end":113,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3433,"byte_end":3480,"line_start":114,"line_end":114,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3481,"byte_end":3484,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3485,"byte_end":3499,"line_start":116,"line_end":116,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3500,"byte_end":3503,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3504,"byte_end":3511,"line_start":118,"line_end":118,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3512,"byte_end":3545,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3546,"byte_end":3568,"line_start":120,"line_end":120,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3569,"byte_end":3572,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3573,"byte_end":3607,"line_start":122,"line_end":122,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3608,"byte_end":3630,"line_start":123,"line_end":123,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3631,"byte_end":3634,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3635,"byte_end":3681,"line_start":125,"line_end":125,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3682,"byte_end":3726,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3727,"byte_end":3732,"line_start":127,"line_end":127,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3733,"byte_end":3740,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3741,"byte_end":3744,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3745,"byte_end":3820,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3821,"byte_end":3868,"line_start":131,"line_end":131,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3869,"byte_end":3872,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3873,"byte_end":3880,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3881,"byte_end":3899,"line_start":134,"line_end":134,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3900,"byte_end":3903,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3904,"byte_end":3934,"line_start":136,"line_end":136,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3935,"byte_end":3938,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3939,"byte_end":3966,"line_start":138,"line_end":138,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3967,"byte_end":3994,"line_start":139,"line_end":139,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":3995,"byte_end":4000,"line_start":140,"line_end":140,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4001,"byte_end":4004,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4005,"byte_end":4052,"line_start":142,"line_end":142,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4053,"byte_end":4056,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4057,"byte_end":4094,"line_start":144,"line_end":144,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4095,"byte_end":4098,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4099,"byte_end":4126,"line_start":146,"line_end":146,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4127,"byte_end":4150,"line_start":147,"line_end":147,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4151,"byte_end":4156,"line_start":148,"line_end":148,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4157,"byte_end":4164,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4165,"byte_end":4168,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4169,"byte_end":4210,"line_start":151,"line_end":151,"column_start":1,"column_end":42}},{"value":"cfg(all (feature = \"std\", feature = \"std_rng\"))","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4211,"byte_end":4260,"line_start":152,"line_end":152,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":4261,"byte_end":4270,"line_start":153,"line_end":153,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21615,"byte_end":21629,"line_start":72,"line_end":72,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21900,"byte_end":21914,"line_start":81,"line_end":81,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21924,"byte_end":21933,"line_start":83,"line_end":83,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23814,"byte_end":23823,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32690,"byte_end":32697,"line_start":164,"line_end":164,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33463,"byte_end":33470,"line_start":186,"line_end":186,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36666,"byte_end":36673,"line_start":270,"line_end":270,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36843,"byte_end":36850,"line_start":276,"line_end":276,"column_start":65,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37423,"byte_end":37431,"line_start":293,"line_end":293,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":60109,"byte_end":60117,"line_start":861,"line_end":861,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":60183,"byte_end":60198,"line_start":865,"line_end":865,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":81222,"byte_end":81235,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85207,"byte_end":85220,"line_start":82,"line_end":82,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":89958,"byte_end":89971,"line_start":216,"line_end":216,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95803,"byte_end":95816,"line_start":393,"line_end":393,"column_start":30,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95843,"byte_end":95856,"line_start":395,"line_end":395,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110262,"byte_end":110270,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110411,"byte_end":110419,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110562,"byte_end":110570,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110706,"byte_end":110714,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110889,"byte_end":110897,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":111192,"byte_end":111200,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119859,"byte_end":119867,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":120616,"byte_end":120628,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":121407,"byte_end":121415,"line_start":82,"line_end":82,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":122596,"byte_end":122604,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":123898,"byte_end":123906,"line_start":159,"line_end":159,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":124250,"byte_end":124258,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13652,"byte_end":13660,"line_start":209,"line_end":209,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14228,"byte_end":14236,"line_start":229,"line_end":229,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153181,"byte_end":153182,"line_start":292,"line_end":292,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169638,"byte_end":169645,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169799,"byte_end":169806,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":170670,"byte_end":170679,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":170820,"byte_end":170829,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175881,"byte_end":175893,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176720,"byte_end":176732,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177271,"byte_end":177283,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177610,"byte_end":177622,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177912,"byte_end":177925,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":178768,"byte_end":178781,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":181357,"byte_end":181370,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":181809,"byte_end":181822,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186011,"byte_end":186018,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186314,"byte_end":186321,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188457,"byte_end":188463,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188919,"byte_end":188925,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":189234,"byte_end":189240,"line_start":74,"line_end":74,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193872,"byte_end":193881,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193979,"byte_end":193988,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":194485,"byte_end":194494,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228785,"byte_end":228793,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":230537,"byte_end":230545,"line_start":95,"line_end":95,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231135,"byte_end":231143,"line_start":111,"line_end":111,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231255,"byte_end":231263,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231564,"byte_end":231576,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232111,"byte_end":232123,"line_start":155,"line_end":155,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232347,"byte_end":232363,"line_start":166,"line_end":166,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232888,"byte_end":232904,"line_start":188,"line_end":188,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211453,"byte_end":211454,"line_start":482,"line_end":482,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211955,"byte_end":211970,"line_start":498,"line_end":498,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":212422,"byte_end":212437,"line_start":513,"line_end":513,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2887,"byte_end":2900,"line_start":96,"line_end":96,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":13}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10129,"byte_end":10136,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":44}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":10278,"byte_end":10286,"line_start":111,"line_end":111,"column_start":35,"column_end":43},"ref_id":{"krate":0,"index":113}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2910,"byte_end":2917,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":289}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2936,"byte_end":2940,"line_start":99,"line_end":99,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":351}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166880,"byte_end":166887,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":352}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mod.rs","byte_start":166898,"byte_end":166902,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":433}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\lib.rs","byte_start":2950,"byte_end":2953,"line_start":100,"line_end":100,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":489}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":195818,"byte_end":195823,"line_start":28,"line_end":28,"column_start":35,"column_end":40},"ref_id":{"krate":0,"index":490}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21615,"byte_end":21629,"line_start":72,"line_end":72,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":658},"to":{"krate":2,"index":5989}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21900,"byte_end":21914,"line_start":81,"line_end":81,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":658},"to":{"krate":1,"index":1624}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":21924,"byte_end":21933,"line_start":83,"line_end":83,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\bernoulli.rs","byte_start":23814,"byte_end":23823,"line_start":128,"line_end":128,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":651},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":32690,"byte_end":32697,"line_start":164,"line_end":164,"column_start":24,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":672},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33463,"byte_end":33470,"line_start":186,"line_end":186,"column_start":44,"column_end":51},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":672},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":33886,"byte_end":33891,"line_start":199,"line_end":199,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":66}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":34466,"byte_end":34471,"line_start":214,"line_end":214,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36666,"byte_end":36673,"line_start":270,"line_end":270,"column_start":56,"column_end":63},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":672},"to":{"krate":2,"index":1806}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":36843,"byte_end":36850,"line_start":276,"line_end":276,"column_start":65,"column_end":72},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":672},"to":{"krate":2,"index":1806}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":37423,"byte_end":37431,"line_start":293,"line_end":293,"column_start":43,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":92},"to":{"krate":0,"index":88}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":60109,"byte_end":60117,"line_start":861,"line_end":861,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":2,"index":31687},"to":{"krate":0,"index":66}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\uniform.rs","byte_start":60183,"byte_end":60198,"line_start":865,"line_end":865,"column_start":25,"column_end":40},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":933},"to":{"krate":0,"index":68}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted.rs","byte_start":81222,"byte_end":81235,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":85207,"byte_end":85220,"line_start":82,"line_end":82,"column_start":37,"column_end":50},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":89958,"byte_end":89971,"line_start":216,"line_end":216,"column_start":33,"column_end":46},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":976},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95803,"byte_end":95816,"line_start":393,"line_end":393,"column_start":30,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":987},"to":{"krate":1,"index":1624}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\weighted_index.rs","byte_start":95843,"byte_end":95856,"line_start":395,"line_end":395,"column_start":23,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":987},"to":{"krate":2,"index":5989}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110262,"byte_end":110270,"line_start":20,"line_end":20,"column_start":27,"column_end":35},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110411,"byte_end":110419,"line_start":27,"line_end":27,"column_start":28,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110562,"byte_end":110570,"line_start":34,"line_end":34,"column_start":28,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110706,"byte_end":110714,"line_start":41,"line_end":41,"column_start":28,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":110889,"byte_end":110897,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\integer.rs","byte_start":111192,"byte_end":111200,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":119859,"byte_end":119867,"line_start":42,"line_end":42,"column_start":29,"column_end":37},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":120616,"byte_end":120628,"line_start":63,"line_end":63,"column_start":29,"column_end":41},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1083},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":121407,"byte_end":121415,"line_start":82,"line_end":82,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":122596,"byte_end":122604,"line_start":117,"line_end":117,"column_start":27,"column_end":35},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":123898,"byte_end":123906,"line_start":159,"line_end":159,"column_start":37,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\other.rs","byte_start":124250,"byte_end":124258,"line_start":173,"line_end":173,"column_start":39,"column_end":47},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1462},"to":{"krate":0,"index":266}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":136342,"byte_end":136347,"line_start":244,"line_end":244,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":248}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":136553,"byte_end":136558,"line_start":251,"line_end":251,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":252}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\utils.rs","byte_start":137003,"byte_end":137008,"line_start":272,"line_end":272,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":257}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":13652,"byte_end":13660,"line_start":209,"line_end":209,"column_start":28,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":4779}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\distributions\\mod.rs","byte_start":14228,"byte_end":14236,"line_start":229,"line_end":229,"column_start":39,"column_end":47},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1450},"to":{"krate":2,"index":5042}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":145689,"byte_end":145696,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":14,"index":138},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rng.rs","byte_start":153181,"byte_end":153182,"line_start":292,"line_end":292,"column_start":35,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":341},"to":{"krate":0,"index":320}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169638,"byte_end":169645,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":169799,"byte_end":169806,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1747},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":170670,"byte_end":170679,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1753},"to":{"krate":2,"index":5989}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\read.rs","byte_start":170820,"byte_end":170829,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1753},"to":{"krate":1,"index":1624}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":175881,"byte_end":175893,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":176720,"byte_end":176732,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1758},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177271,"byte_end":177283,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":1592}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177610,"byte_end":177622,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1758},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":177912,"byte_end":177925,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1767},"to":{"krate":14,"index":18}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":178768,"byte_end":178781,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":181357,"byte_end":181370,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1767},"to":{"krate":2,"index":1592}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\adapter\\reseeding.rs","byte_start":181809,"byte_end":181822,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1767},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186011,"byte_end":186018,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\mock.rs","byte_start":186314,"byte_end":186321,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1779},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188457,"byte_end":188463,"line_start":38,"line_end":38,"column_start":18,"column_end":24},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1786},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":188919,"byte_end":188925,"line_start":60,"line_end":60,"column_start":22,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1786},"to":{"krate":14,"index":144}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\std.rs","byte_start":189234,"byte_end":189240,"line_start":74,"line_end":74,"column_start":20,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1786},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193872,"byte_end":193881,"line_start":86,"line_end":86,"column_start":18,"column_end":27},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1793},"to":{"krate":2,"index":1873}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":193979,"byte_end":193988,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1793},"to":{"krate":14,"index":138}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\rngs\\thread.rs","byte_start":194485,"byte_end":194494,"line_start":112,"line_end":112,"column_start":20,"column_end":29},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1793},"to":{"krate":14,"index":143}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":228785,"byte_end":228793,"line_start":36,"line_end":36,"column_start":6,"column_end":14},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1805},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":230537,"byte_end":230545,"line_start":95,"line_end":95,"column_start":20,"column_end":28},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":1618}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231135,"byte_end":231143,"line_start":111,"line_end":111,"column_start":25,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":1806}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231255,"byte_end":231263,"line_start":118,"line_end":118,"column_start":27,"column_end":35},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1805},"to":{"krate":2,"index":1806}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":231564,"byte_end":231576,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1816},"to":{"krate":2,"index":4779}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232111,"byte_end":232123,"line_start":155,"line_end":155,"column_start":32,"column_end":44},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1816},"to":{"krate":2,"index":4734}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232347,"byte_end":232363,"line_start":166,"line_end":166,"column_start":19,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1827},"to":{"krate":2,"index":4779}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":232888,"byte_end":232904,"line_start":188,"line_end":188,"column_start":28,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1827},"to":{"krate":2,"index":4734}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":237970,"byte_end":237974,"line_start":316,"line_end":316,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1892},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":237977,"byte_end":237987,"line_start":316,"line_end":316,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1655},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":237990,"byte_end":237993,"line_start":316,"line_end":316,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":1644},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":237996,"byte_end":238005,"line_start":316,"line_end":316,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":1618},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":238008,"byte_end":238010,"line_start":316,"line_end":316,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1623},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":238013,"byte_end":238026,"line_start":316,"line_end":316,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":66},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\index.rs","byte_start":238041,"byte_end":238045,"line_start":316,"line_end":316,"column_start":84,"column_end":88},"kind":"SuperTrait","from":{"krate":2,"index":6175},"to":{"krate":0,"index":545}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203198,"byte_end":203206,"line_start":242,"line_end":242,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":4779},"to":{"krate":0,"index":587}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":203209,"byte_end":203214,"line_start":242,"line_end":242,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1887},"to":{"krate":0,"index":587}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211453,"byte_end":211454,"line_start":482,"line_end":482,"column_start":28,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":626},"to":{"krate":0,"index":587}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":211955,"byte_end":211970,"line_start":498,"line_end":498,"column_start":73,"column_end":88},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":4779}},{"span":{"file_name":"C:\\Users\\Beni Reydman\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\bf8b5a9\\src\\seq\\mod.rs","byte_start":212422,"byte_end":212437,"line_start":513,"line_end":513,"column_start":9,"column_end":24},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1838},"to":{"krate":2,"index":4734}}]}